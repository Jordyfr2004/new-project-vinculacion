import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { jwtDecode } from 'jwt-decode';

interface JWTPayload {
  sub: string;
  email: string;
  rol: string;
  exp?: number;
}

export function middleware(req: NextRequest) {
  const token = req.cookies.get('token')?.value || '';
  const url = req.nextUrl.pathname;

  // Rutas p√∫blicas
  if (url === '/' || url.startsWith('/_next') || url.startsWith('/public')) {
    return NextResponse.next();
  }

  if (!token) return NextResponse.redirect(new URL('/', req.url));

  try {
    const decoded = jwtDecode<JWTPayload>(token);

    if (decoded.exp && decoded.exp * 1000 < Date.now()) {
      const res = NextResponse.redirect(new URL('/', req.url));
      res.cookies.delete('token');
      return res;
    }

    // Control por rol
    if (url.startsWith('/admin') && decoded.rol !== 'admin')
      return NextResponse.redirect(new URL('/', req.url));

    if (url.startsWith('/donantes') && decoded.rol !== 'donante')
      return NextResponse.redirect(new URL('/', req.url));

    if (url.startsWith('/receptores') && decoded.rol !== 'receptor')
      return NextResponse.redirect(new URL('/', req.url));

    return NextResponse.next();
  } catch (err) {
    const res = NextResponse.redirect(new URL('/', req.url));
    res.cookies.delete('token');
    return res;
  }
}

export const config = {
  matcher: ['/admin/:path*', '/donantes/:path*', '/receptores/:path*'],
};
